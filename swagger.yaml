openapi: 3.0.0
info:
  title: Share-a-Ride API
  version: 1.0.0
  description: Full API documentation for Share-a-Ride backend (users, admin, support, rides, disputes, auth)
servers:
  - url: http://localhost:3000
paths:
  /users/register:
    post:
      summary: Register a new user (requires email verification)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name: { type: string }
                email: { type: string }
                password: { type: string }
                phoneNumber: { type: string }
                address: { type: string }
                photo: { type: string, format: binary }
                idCardImg: { type: string, format: binary }
      responses:
        '201': { description: User registered }
        '400': { description: Bad request }
  /users/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        '200':
          description: Login success
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token: { type: string }
                  refresh_token: { type: string }
                  name: { type: string }
                  email: { type: string }
                  phoneNumber: { type: string }
                  photo: { type: string }
                  rating: { type: number }
                  role: { type: string }
                  driverStatus: { type: string }
        '401': { description: Unauthorized }
  /users/request-email-otp:
    post:
      summary: Request email OTP for registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
      responses:
        '200': { description: OTP sent }
        '400': { description: Bad request }
  /users/verify-email-otp:
    post:
      summary: Verify email OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                otp: { type: string }
      responses:
        '200': { description: Email verified }
        '400': { description: Invalid or expired OTP }
  /users/refresh-token:
    post:
      summary: Exchange refresh token for new access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token: { type: string }
      responses:
        '200': { description: New access token }
        '401': { description: Invalid or expired refresh token }
  /users/logout:
    post:
      summary: Logout and revoke refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token: { type: string }
      responses:
        '200': { description: Logged out }
        '400': { description: Invalid refresh token }
  /users/request-password-reset:
    post:
      summary: Request password reset OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
      responses:
        '200': { description: OTP sent }
        '404': { description: User not found }
  /users/reset-password:
    post:
      summary: Reset password using OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                otp: { type: string }
                newPassword: { type: string }
      responses:
        '200': { description: Password reset successful }
        '400': { description: Invalid or expired OTP }
  /users:
    get:
      summary: Get all users (support only)
      security:
        - bearerAuth: []
      responses:
        '200': { description: List of users }
  /users/{id}:
    get:
      summary: Get user by ID (support only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200': { description: User details }
        '404': { description: Not found }
  /rides:
    get:
      summary: Get all rides (support only)
      security:
        - bearerAuth: []
      responses:
        '200': { description: List of rides }
  /rides/{id}:
    get:
      summary: Get ride by ID (support only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200': { description: Ride details }
        '404': { description: Not found }
  /rides/{id}/disputes:
    post:
      summary: User creates a dispute for a ride
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description: { type: string }
      responses:
        '201': { description: Dispute created }
        '400': { description: Bad request }
  /disputes:
    get:
      summary: List all disputes (support only)
      security:
        - bearerAuth: []
      responses:
        '200': { description: List of disputes }
  /disputes/{id}:
    get:
      summary: Get dispute details (support only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200': { description: Dispute details }
        '404': { description: Not found }
  /disputes/{id}/resolve:
    patch:
      summary: Resolve a dispute (support only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200': { description: Dispute resolved }
        '400': { description: Already resolved }
        '404': { description: Not found }
  /admin/assign-role/{userId}:
    patch:
      summary: Assign or revoke a role for a user or admin (superadmin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role: { type: string, enum: [user, driver, admin, support, superadmin] }
      responses:
        '200': { description: Role updated }
        '400': { description: Invalid role }
        '403': { description: Only superadmin can assign roles }
        '404': { description: User or admin not found }
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 