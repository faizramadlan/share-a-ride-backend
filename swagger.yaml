openapi: 3.0.0
info:
  title: Share-a-Ride API
  version: 1.0.0
  description: Full API documentation for Share-a-Ride backend (users, admin, support, rides, disputes, auth, vehicles)
servers:
  - url: http://localhost:3000
paths:
  # User Authentication & Profile Endpoints
  /users/register:
    post:
      summary: Register a new user (requires email verification)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name: { type: string }
                email: { type: string }
                password: { type: string }
                phoneNumber: { type: string }
                address: { type: string }
                photo: { type: string, format: binary }
                idCardImg: { type: string, format: binary }
      responses:
        '201': { description: User registered }
        '400': { description: Bad request }
  /users/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        '200':
          description: Login success
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token: { type: string }
                  refresh_token: { type: string }
                  name: { type: string }
                  email: { type: string }
                  phoneNumber: { type: string }
                  photo: { type: string }
                  rating: { type: number }
                  role: { type: string }
                  driverStatus: { type: string }
        '401': { description: Unauthorized }
  /users/currentUser:
    get:
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        '200': { description: Current user details }
        '401': { description: Unauthorized }
  /users/profile:
    patch:
      summary: Update user profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name: { type: string }
                phoneNumber: { type: string }
                address: { type: string }
                photo: { type: string, format: binary }
      responses:
        '200': { description: Profile updated }
        '400': { description: Bad request }
  /users/rate/{id}:
    patch:
      summary: Rate another user
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating: { type: number, minimum: 1, maximum: 5 }
      responses:
        '200': { description: Rating updated }
        '400': { description: Bad request }
  /users/request-driver-upgrade:
    post:
      summary: Request driver upgrade (user role only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                licenseNumber: { type: string }
                driverDocuments: { type: string, format: binary }
      responses:
        '201': { description: Driver upgrade request submitted }
        '400': { description: Bad request }
  /users/request-email-otp:
    post:
      summary: Request email OTP for registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
      responses:
        '200': { description: OTP sent }
        '400': { description: Bad request }
  /users/verify-email-otp:
    post:
      summary: Verify email OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                otp: { type: string }
      responses:
        '200': { description: Email verified }
        '400': { description: Invalid or expired OTP }
  /users/refresh-token:
    post:
      summary: Exchange refresh token for new access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token: { type: string }
      responses:
        '200': { description: New access token }
        '401': { description: Invalid or expired refresh token }
  /users/logout:
    post:
      summary: Logout and revoke refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token: { type: string }
      responses:
        '200': { description: Logged out }
        '400': { description: Invalid refresh token }
  /users/request-password-reset:
    post:
      summary: Request password reset OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
      responses:
        '200': { description: OTP sent }
        '404': { description: User not found }
  /users/reset-password:
    post:
      summary: Reset password using OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                otp: { type: string }
                newPassword: { type: string }
      responses:
        '200': { description: Password reset successful }
        '400': { description: Invalid or expired OTP }
  /users:
    get:
      summary: Get all users (support only)
      security:
        - bearerAuth: []
      responses:
        '200': { description: List of users }
  /users/{id}:
    get:
      summary: Get user by ID (support only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200': { description: User details }
        '404': { description: Not found }

  # Ride Endpoints
  /rides:
    get:
      summary: Get all rides (support only)
      security:
        - bearerAuth: []
      responses:
        '200': { description: List of rides }
    post:
      summary: Create a new ride (driver only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                startLocation: { type: string }
                destination: { type: string }
                departureTime: { type: string, format: date-time }
                arrivalTime: { type: string, format: date-time }
                price: { type: number }
                seats: { type: integer }
      responses:
        '201': { description: Ride created }
        '400': { description: Bad request }
  /rides/requests:
    get:
      summary: Get ride requests
      responses:
        '200': { description: List of ride requests }
  /rides/{id}:
    get:
      summary: Get ride by ID (support only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200': { description: Ride details }
        '404': { description: Not found }
    put:
      summary: Update ride (ride owner only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                startLocation: { type: string }
                destination: { type: string }
                departureTime: { type: string, format: date-time }
                arrivalTime: { type: string, format: date-time }
                price: { type: number }
                seats: { type: integer }
      responses:
        '200': { description: Ride updated }
        '400': { description: Bad request }
        '403': { description: Not authorized }
    delete:
      summary: Delete ride (ride owner only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200': { description: Ride deleted }
        '403': { description: Not authorized }
  /rides/generate-midtrans-token/{id}:
    post:
      summary: Generate Midtrans payment token for ride
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200': { description: Payment token generated }
        '404': { description: Ride not found }
  /rides/order/{id}:
    post:
      summary: Order a ride (user only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '201': { description: Ride ordered }
        '400': { description: Bad request }
    delete:
      summary: Cancel ride order
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200': { description: Order cancelled }
        '404': { description: Order not found }
    patch:
      summary: Change order status
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status: { type: string, enum: [pending, confirmed, completed, cancelled] }
      responses:
        '200': { description: Status updated }
        '400': { description: Bad request }
  /rides/{id}/disputes:
    post:
      summary: User creates a dispute for a ride
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description: { type: string }
      responses:
        '201': { description: Dispute created }
        '400': { description: Bad request }

  # Vehicle Endpoints
  /vehicles:
    post:
      summary: Create a new vehicle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type: { type: string }
                plateNumber: { type: string }
      responses:
        '201': { description: Vehicle created }
        '400': { description: Bad request }
  /vehicles/{id}:
    put:
      summary: Update vehicle
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type: { type: string }
                plateNumber: { type: string }
      responses:
        '200': { description: Vehicle updated }
        '400': { description: Bad request }
    delete:
      summary: Delete vehicle
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200': { description: Vehicle deleted }
        '404': { description: Vehicle not found }

  # Admin Endpoints
  /admin/register:
    post:
      summary: Register a new admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                email: { type: string }
                password: { type: string }
                role: { type: string, enum: [admin, superadmin] }
      responses:
        '201': { description: Admin registered }
        '400': { description: Bad request }
  /admin/login:
    post:
      summary: Admin login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        '200':
          description: Login success
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token: { type: string }
                  name: { type: string }
                  email: { type: string }
                  role: { type: string }
        '401': { description: Unauthorized }
  /admin/users:
    get:
      summary: Get all users (admin only)
      security:
        - bearerAuth: []
      responses:
        '200': { description: List of users }
  /admin/users/{id}:
    get:
      summary: Get user by ID (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200': { description: User details }
        '404': { description: Not found }
  /admin/users/{userId}:
    patch:
      summary: Change user status (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status: { type: string, enum: [active, suspended, banned] }
      responses:
        '200': { description: User status updated }
        '400': { description: Bad request }
  /admin/rides:
    get:
      summary: Get all rides (admin only)
      security:
        - bearerAuth: []
      responses:
        '200': { description: List of rides }
  /admin/rides/{id}:
    delete:
      summary: Delete ride (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200': { description: Ride deleted }
        '404': { description: Ride not found }
  /admin/pending-drivers:
    get:
      summary: Get pending driver requests (admin only)
      security:
        - bearerAuth: []
      responses:
        '200': { description: List of pending driver requests }
  /admin/approve-driver/{userId}:
    patch:
      summary: Approve driver request (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action: { type: string, enum: [approve, reject] }
                reason: { type: string }
      responses:
        '200': { description: Driver request approved }
        '400': { description: Bad request }
  /admin/reject-driver/{userId}:
    patch:
      summary: Reject driver request (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action: { type: string, enum: [approve, reject] }
                reason: { type: string }
      responses:
        '200': { description: Driver request rejected }
        '400': { description: Bad request }
  /admin/assign-role/{userId}:
    patch:
      summary: Assign or revoke a role for a user or admin (superadmin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role: { type: string, enum: [user, driver, admin, support, superadmin] }
      responses:
        '200': { description: Role updated }
        '400': { description: Invalid role }
        '403': { description: Only superadmin can assign roles }
        '404': { description: User or admin not found }

  # Dispute Endpoints
  /disputes:
    get:
      summary: List all disputes (support only)
      security:
        - bearerAuth: []
      responses:
        '200': { description: List of disputes }
  /disputes/{id}:
    get:
      summary: Get dispute details (support only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200': { description: Dispute details }
        '404': { description: Not found }
  /disputes/{id}/resolve:
    patch:
      summary: Resolve a dispute (support only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resolution: { type: string }
                status: { type: string, enum: [resolved, dismissed] }
      responses:
        '200': { description: Dispute resolved }
        '400': { description: Already resolved }
        '404': { description: Not found }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 